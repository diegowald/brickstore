name: QMake Build Matrix

on: [push, workflow_dispatch]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      BUILD_NUMBER: ${{ github.run_number }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows 32bit"
          artifact: "Windows-x86"
          os: windows-latest
          qt_version: '5.15.2'
          qt_arch: 'win32_msvc2019'
          openssl_version: 'Win32OpenSSL_Light-1_1_1i'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat"

        - name: "Windows 64bit"
          artifact: "Windows-x64"
          os: windows-latest
          qt_version: '5.15.2'
          qt_arch: 'win64_msvc2019_64'
          openssl_version: 'Win64OpenSSL_Light-1_1_1i'
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

        - name: "Ubuntu 20.04 64bit"
          artifact: "Ubuntu-20.04"
          os: ubuntu-20.04

        - name: "Debian 10 Backend 64bit"
          artifact: "Debian-10-Backend"
          os: ubuntu-20.04
          debian_container: "buildpack-deps:buster"
          qmake_extra_config: "CONFIG+=backend-only"

        - name: "macOS 64bit"
          artifact: "macOS"
          os: macos-latest
          qt_version: '5.15.2'
          qt_arch: ''

    steps:
    - uses: actions/checkout@v1

    - name: Install Qt from qt.io
      if: (!startsWith(matrix.config.os, 'ubuntu'))
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.config.qt_version }}
        modules: 'qtsvg qttools'
        arch: ${{ matrix.config.qt_arch }}
        tools: ${{ matrix.config.qt_tools }}

    - name: Install Qt on Linux (native)
      if: startsWith(matrix.config.os, 'ubuntu') && !matrix.config.debian_container
      run: |
        sudo apt update
        sudo apt -y install debhelper qt5-default libqt5opengl5-dev qttools5-dev qtbase5-private-dev qtdeclarative5-dev lsb-release fakeroot build-essential
      shell: bash

    - name: Install Qt on Linux (container)
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.debian_container
      run: |
        sudo docker run -v `pwd`:/build --rm --name "debian-build" -d "${{ matrix.config.debian_container }}" sleep 1d
        sudo docker exec "debian-build" apt update
        sudo docker exec "debian-build" apt -y install debhelper qt5-default libqt5opengl5-dev qttools5-dev qtbase5-private-dev qtdeclarative5-dev lsb-release fakeroot build-essential
      shell: bash

    - name: Install OpenSSL on Windows
      if: startsWith(matrix.config.os, 'windows')
      run: |
        curl.exe --output openssl.msi "https://slproweb.com/download/${{ matrix.config.openssl_version }}.msi"
        msiexec /i openssl.msi /quiet /qn /norestart
      shell: cmd

    - name: Build on Windows
      if: startsWith(matrix.config.os, 'windows')
      run: |
        call "${{ matrix.config.environment_script }}"
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        nmake
        nmake installer
      shell: cmd

    - name: Upload Installer on Windows
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'windows')
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.exe"

    - name: Build on Linux (native)
      if: startsWith(matrix.config.os, 'ubuntu') && !matrix.config.debian_container
      run: |
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make package
      shell: bash

    - name: Build on Linux (container)
      if: startsWith(matrix.config.os, 'ubuntu') && matrix.config.debian_container
      run: |
        sudo docker exec -w /build "debian-build" qmake CONFIG+=release "${{ matrix.config.qmake_extra_config }}"
        sudo docker exec -w /build "debian-build" make package
      shell: bash

    - name: Upload DEB on Linux
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'ubuntu')
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.deb"


    - name: Build on macOS
      if: (startsWith(matrix.config.os, 'mac'))
      run: |
        qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make
        make installer
      shell: bash

    - name: Upload DMG on macOS
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.config.os, 'mac')
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.dmg"

  release:
    needs: [ build ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1

    - name: Download Artifacts to Release
      uses: actions/download-artifact@v2
      with:
        path: 'artifacts'

    - name: Rename Artifacts
      run: |
        find artifacts -mindepth 2 -type f -print0 | while read -d $'\0' a; do
          d="$(dirname $a)"
          mv "$a" "${d}-$(basename $a)"
          rm -rf "$d"
        done
        echo "Artifacts after flattening:"
        find artifacts
      shell: bash

    - name: Release
      uses: docker://antonyurchenko/git-release:latest
      # uses: rgriebl/git-release@testing
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CHANGELOG_FILE: 'CHANGELOG.md'
        ALLOW_EMPTY_CHANGELOG: "false"
        ALLOW_TAG_PREFIX: "true"
      with:
        args: artifacts/*
